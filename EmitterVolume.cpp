/** @file *//********************************************************************************************************

                                                  EmitterVolume.cpp

						                    Copyright 2003, John J. Bolton
	--------------------------------------------------------------------------------------------------------------

	$Header: //depot/Libraries/Sparkles/EmitterVolume.cpp#5 $

	$NoKeywords: $

 ********************************************************************************************************************/

#include "PrecompiledHeaders.h"

#include "EmitterVolume.h"

#include "Math/Vector3.h"
#include "Math/FastMath.h"
#include "Misc/Random.h"


namespace Sparkles
{


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterVolume::EmitterVolume( unsigned int seed )
	: m_Rng( seed )
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterVolume::~EmitterVolume()
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterPoint::EmitterPoint( unsigned int seed )
	: EmitterVolume( seed )
{
}

EmitterPoint::~EmitterPoint()
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterLine::EmitterLine( unsigned int seed, float size )
	: EmitterVolume( seed ),
	m_Size( size )
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterLine::~EmitterLine()
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

Vector3 EmitterLine::Next() const
{
	float const	x	= m_Rng.Get( m_Size ) - m_Size * .5f;

	return Vector3( x, 0.f, 0.f );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterRectangle::EmitterRectangle( unsigned int seed, Vector2 const & size )
	: EmitterVolume( seed ),
	m_Size( size )
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterRectangle::~EmitterRectangle()
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

Vector3 EmitterRectangle::Next() const
{
	float const	x	= m_Rng.Get( m_Size.m_X ) - m_Size.m_X * .5f;
	float const	z	= m_Rng.Get( m_Size.m_Y ) - m_Size.m_Y * .5f;

	return Vector3( x, 0.f, z );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterCircle::EmitterCircle( unsigned int seed, float radius )
	: EmitterVolume( seed ),
	m_Radius( radius )
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterCircle::~EmitterCircle()
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

Vector3 EmitterCircle::Next() const
{
	float const	a = m_Rng.Get( float( Math::TWO_PI ) );
	float const	r = sqrtf( m_Rng.Get( m_Radius ) );
	float		c, s;

	Math::fsincos( a, &s, &c );

	return Vector3( c * r, s * r, 0.f );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterSphere::EmitterSphere( unsigned int seed, float radius )
	: EmitterVolume( seed ),
	m_Radius( radius )
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterSphere::~EmitterSphere()
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

Vector3 EmitterSphere::Next() const
{
	float const	a	= m_Rng.Get( float( Math::TWO_PI ) );
	float const	b	= m_Rng.Get( float( Math::PI ) );
	float const	r	= powf( m_Rng.Get( m_Radius ), 1.f/3.f );
	float		ca, sa, cb, sb;

	Math::fsincos( a, &sa, &ca );
	Math::fsincos( b, &sb, &cb );

	return Vector3( ca * sb * r, sa * sb * r, cb * r );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterBox::EmitterBox( unsigned int seed, Vector3 const & size )
	: EmitterVolume( seed ),
	m_Size( size )
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterBox::~EmitterBox()
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

Vector3 EmitterBox::Next() const
{
	float const	x	= m_Rng.Get( m_Size.m_X ) - m_Size.m_X * .5f;
	float const	y	= m_Rng.Get( m_Size.m_Y ) - m_Size.m_Y * .5f;
	float const	z	= m_Rng.Get( m_Size.m_Z ) - m_Size.m_Z * .5f;

	return Vector3( x, y, z );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterCylinder::EmitterCylinder( unsigned int seed, float radius, float height )
	: EmitterVolume( seed ),
	m_Radius( radius ),
	m_Height( height )
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterCylinder::~EmitterCylinder()
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

Vector3 EmitterCylinder::Next() const
{
	float const	a	= m_Rng.Get( float( Math::TWO_PI ) );
	float const	h	= m_Rng.Get( m_Height );
	float const	r	= sqrtf( m_Rng.Get( m_Radius ) );
	float		c, s;

	Math::fsincos( a, &s, &c );

	return Vector3( c * r, s * r, h );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterCone::EmitterCone( unsigned int seed, float radius, float height )
	: EmitterVolume( seed ),
	m_Radius( radius ),
	m_Height( height )
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

EmitterCone::~EmitterCone()
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

Vector3 EmitterCone::Next() const
{
	float const	a	= m_Rng.Get( float( Math::TWO_PI ) );
	float		h	= m_Rng.Get();
	float		r	= m_Rng.Get();
	float		c, s;

	Math::fsincos( a, &s, &c );

	h = powf( h, 1.f/3.f ) * m_Height;
	r = sqrtf( r ) / m_Radius * h;

	return Vector3( c * r, s * r, h );
}


} // namespace Sparkles
